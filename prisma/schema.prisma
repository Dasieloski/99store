generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Usuario (Admin)
model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String
  role     String
  tokens   Token[]
}

enum Role {
  ADMIN
}

// Categoría
model Category {
  id          String    @id
  name        String    @unique
  emoji       String
  gradient    String
  description String
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
}

// Producto
model Product {
  id                  String         @id @default(cuid())
  name                String
  price               Decimal        @db.Decimal(10, 2)
  image               String
  categoryId          String
  description         String
  emoji               String
  detailedDescription String?        @db.Text
  stock               Int            @default(0) // Stock principal
  category            Category       @relation(fields: [categoryId], references: [id])
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  Offer               Offer[]
  AlmacenVentas       AlmacenVentas?
  SaleProduct         SaleProduct[]

  @@map("products")
}

// Moneda
model Currency {
  id           String   @id @default(cuid())
  code         String   @unique // USD, CUP, MLC, EUR
  symbol       String // $, €
  exchangeRate Decimal  @db.Decimal(10, 2)
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("currencies")
}

model Token {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model Offer {
  id          String   @id @default(cuid())
  productId   String
  discount    Float
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  title       String?
  description String?
  emoji       String?
  product     Product  @relation(fields: [productId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("offers")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

//productos del carrito a mostrar en el panel de admin
model Order {
  id              Int         @id @default(autoincrement())
  customerName    String
  customerPhone   String
  customerAddress String
  total           Float
  createdAt       DateTime    @default(now())
  status          OrderStatus @default(PENDING)
  orderItems      OrderItem[]
}

model OrderItem {
  id        Int    @id @default(autoincrement())
  productId String
  name      String
  price     Float
  quantity  Int
  order     Order  @relation(fields: [orderId], references: [id])
  orderId   Int
}

model AlmacenVentas {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @unique
  stock     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("almacen_ventas")
}

model Sale {
  id            Int             @id @default(autoincrement())
  total         Float
  paymentMethod String
  products      SaleProduct[]
  status        String          @default("completed")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ReturnRequest ReturnRequest[]
}

model SaleProduct {
  id        Int     @id @default(autoincrement())
  saleId    Int
  productId String // Cambiado de Int a String
  quantity  Int
  price     Float
  sale      Sale    @relation(fields: [saleId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model ReturnRequest {
  id        Int          @id @default(autoincrement())
  sale      Sale         @relation(fields: [saleId], references: [id])
  saleId    Int
  products  Json
  total     Float
  status    ReturnStatus @default(PENDING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

enum ReturnStatus {
  PENDING
  AUTHORIZED
  REJECTED
}
